; Generated by JITX 2.25.0
#use-added-syntax(jitx)
defpackage main :
  import jitx
  import core
  import jitx/commands
  import ocdb/utils/generic-components
  import helpers
  import ocdb/modules/passive-circuits

; Define a default through-hole via for the PCB
pcb-via default-th:
  start = Top
  stop = Bottom
  diameter = 0.65
  hole-diameter = 0.4
  type = MechanicalDrill
  tented = true

; Define a via-in-pad for the PCB
pcb-via via-in-pad:
  start = Top
  stop = Bottom

  diameter = 0.3
  hole-diameter = 0.2
  type = MechanicalDrill
  via-in-pad = true

; Define the shape/size of the board
val board-shape = RoundedRectangle(60.0, 40.0, 0.25)

val my-stackup = ocdb/manufacturers/stackups/jlcpcb-jlc2313-6layer

pcb-board circuit-board :
  stackup = my-stackup
  vias = [default-th, via-in-pad]
  boundary = board-shape
  signal-boundary = offset(board-shape, -0.5)

; Define a check to ensure that a component has a rated-temperature property
pcb-check check-rated-temperature (component:JITXObject):

    #CHECK(
    name =                 "Has Rated Temperature"
    description =          "Check that a component has a rated-temperature property"
    condition =            has-property?(component.rated-temperature),
    category =             "Component Data"
    subcheck-description = "Check that %_ has a defined rated-temperature" % [ref(component)],
    pass-message =         "%_ has a property for rated-temperature of %_" % [ref(component) property(component.rated-temperature)],
    info-message =         "%_ does not have a rated-temperature property attached" % [ref(component)],
    locators =             [instance-definition(component)]
    )

pcb-module lm317a-regulator (output-voltage:Toleranced) :
  pin vin
  pin vout
  pin gnd
  pin adj

  inst lm317a : ocdb/components/unisonic/LM317A/component
  net (vin  lm317a.input)
  net (vout lm317a.output)

  cap-strap(vin, gnd, ["capacitance" => 0.1e-6 "min-rated-voltage" => 25.0])
  cap-strap(vout, gnd, ["capacitance" => 1.0e-6 "min-rated-voltage" => 25.0])


  ; How much variability can we expect from the regulator alone?
  val refVoltage = property(lm317a.reference-voltage)
  val inherent-variance = tol+%(refVoltage)
  if inherent-variance > tol+%(output-voltage):
    fatal("Target design accuracy infeasible with LM317A %_ > %_" % [inherent-variance tol+%(output-voltage)])

  ; Budget variability for the voltage divider
  val target-variance = tol+%(output-voltage) - inherent-variance

  ; 5mA of voltage-divider current to compensate for regulator adj current
  val divider-current = 5.0e-3
  val adj-current = property(lm317a.adj-current) ; retrieve the property from the component definition
  ; Estimate offset voltage caused by current sourced from adj pin
  val est-v-adj-offset = (typ-value(output-voltage) - typ-value(refVoltage)) / divider-current * adj-current

  inst output-voltage-divider : ocdb/modules/passive-circuits/voltage-divider(source-voltage = high-voltage, divider-output = adj-voltage, current = current) where :
    val high-voltage = tol%(center-value(output-voltage) - est-v-adj-offset, 0.0)
    val adj-voltage = tol%(typ-value(refVoltage),target-variance)
    val current = divider-current

  ; Calculate the actual offset now that we know the optimized value of the resistors
  val true-adj-offset = adj-current * (property(output-voltage-divider.r-lo.resistance) as Double)
  val vref = property(output-voltage-divider.output-voltage)

  ; Calculate the possible min and max values for the output voltage
  val out = refVoltage * typ(center-value(output-voltage)) / vref + typ(true-adj-offset)

  ; Make sure that the voltage specification is met
  check ocdb/utils/checks/within?(output-voltage, out)

  check check-rated-temperature(lm317a)

  ; inside pcb-module lm317a-regulator 
  schematic-group(self) = lm317a
  layout-group(self) = lm317a


; Module to run as a design
public pcb-module my-design :
  val target-voltage = 3.30 +/- (10 %) 
  inst reg : lm317a-regulator(target-voltage)

  inst U1 : components/asm2464pd/component

  public net GND (U1.TEST_EN)

  for g in pins(U1.GND) do :
    net (GND g)


  ;public net GND (my-gnd, U1.TEST_EN)

  
  ; create USB connectors
  val usb-x-shift = 4.0
  val usb-y-shift = -7.0
  ; public inst in-usb : ocdb/components/xkb/U263-241N-4BQC11-1/component
  public inst in-usb : components/USB-C-1054500101/component
  place(in-usb) at loc((-1.0 * width(board-shape) / 2.0) + usb-x-shift, usb-y-shift, -90.0) on Top

  

  inst source : banana-plug-module() ; shortcut to instantiate and place two `banana-plug`s plus the electrical support
  net gnd (reg.gnd, source.power.gnd)
  net vin (reg.vin, source.power.vdd)

  inst measure : bnc-connector()
  net vout (reg.vout, measure.sig)
  net (gnd, measure.gnd)

  val test-points = add-testpoint([reg.adj, gnd])

  val target-current = 450.0e-3
  val target-load = closest-std-val(typ-value(target-voltage) / target-current, 5.0)
  inst load : chip-resistor(["resistance" => target-load, "min-rated-power" => typ-value(target-voltage) * target-current * 2.0 ])
  
  net (load.p[1], reg.vout)
  net (load.p[2], gnd)

  ; add a ground plane
  geom(gnd) :
    copper-pour(LayerIndex(1), isolate = 0.1, rank = 1, orphans = true) = Rectangle(width(board-shape) - 1.0, height(board-shape) - 1.0)

  ; add a net class for power nets
  val power-net-class = NetClass(`Power, [`min-trace => 0.381])
  property(gnd.net-class) = power-net-class
  property(vout.net-class) = power-net-class
  property(vin.net-class) = power-net-class
  
  symbol(gnd) = ocdb/utils/symbols/ground-sym ; has to be placed after the definition of the net itself
  symbol(vout) = ocdb/utils/symbols/supply-sym ; has to be placed after the definition of the net itself
  
  property(gnd.voltage) = typ(0.0)
  property(vout.voltage) = target-voltage
  property(vin.voltage) = typ(10.0)

  ; inside pcb-module my-module
  schematic-group([test-points, measure]) = test
  layout-group([test-points, measure]) = test

  ;inside pcb-module my-module
  schematic-group(load) = schematic-group(reg)
  layout-group(load) = layout-group(reg)

  ocdb/utils/checks/check-design(self)

  ; Write the board version on silkscreen
  inst version-label  : ocdb/artwork/board-text/version-silkscreen("Version 0.0")
  place(version-label) at loc(0.0, height(board-shape) / 2.0 - 1.0) on Bottom

; Set the design name     - a directory with this name will be generated under the "designs" directory
;     the board           - a Board object
;     [optional] rules    - the PCB design rules (if not givn default rules will be used)
;     [optional] vendors  - Strings or AuthorizedVendors (if not give default vendors will be used)
;     [optional] quantity - Minimum stock quantity the vendor should carry (if not give default quantity will be used)
setup-design(
  "jitx-design",
  circuit-board,
)

; Set the schematic sheet size
set-paper(ANSI-A)

set-use-layout-groups()

; Set the top level module (the module to be compile into a schematic and PCB)
set-main-module(my-design)

; Use any helper function from helpers.stanza here
run-check-on-design(my-design)

; View the results
view-board()
view-schematic()
view-design-explorer()